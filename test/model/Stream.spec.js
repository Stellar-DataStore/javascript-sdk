/**
 * Stellar DataStore
 * The Stellar DataStore service is your instantly available, secure and worry-free cloud data storage service. Sign-up now and minutes later, you can start putting your data in the cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StellarDataStore);
  }
}(this, function(expect, StellarDataStore) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StellarDataStore.Stream();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Stream', function() {
    it('should create an instance of Stream', function() {
      // uncomment below and update the code to test Stream
      //var instance = new StellarDataStore.Stream();
      //expect(instance).to.be.a(StellarDataStore.Stream);
    });

    it('should have the property canRead (base name: "canRead")', function() {
      // uncomment below and update the code to test the property canRead
      //var instance = new StellarDataStore.Stream();
      //expect(instance).to.be();
    });

    it('should have the property canWrite (base name: "canWrite")', function() {
      // uncomment below and update the code to test the property canWrite
      //var instance = new StellarDataStore.Stream();
      //expect(instance).to.be();
    });

    it('should have the property canSeek (base name: "canSeek")', function() {
      // uncomment below and update the code to test the property canSeek
      //var instance = new StellarDataStore.Stream();
      //expect(instance).to.be();
    });

    it('should have the property canTimeout (base name: "canTimeout")', function() {
      // uncomment below and update the code to test the property canTimeout
      //var instance = new StellarDataStore.Stream();
      //expect(instance).to.be();
    });

    it('should have the property length (base name: "length")', function() {
      // uncomment below and update the code to test the property length
      //var instance = new StellarDataStore.Stream();
      //expect(instance).to.be();
    });

    it('should have the property position (base name: "position")', function() {
      // uncomment below and update the code to test the property position
      //var instance = new StellarDataStore.Stream();
      //expect(instance).to.be();
    });

    it('should have the property readTimeout (base name: "readTimeout")', function() {
      // uncomment below and update the code to test the property readTimeout
      //var instance = new StellarDataStore.Stream();
      //expect(instance).to.be();
    });

    it('should have the property writeTimeout (base name: "writeTimeout")', function() {
      // uncomment below and update the code to test the property writeTimeout
      //var instance = new StellarDataStore.Stream();
      //expect(instance).to.be();
    });

  });

}));
