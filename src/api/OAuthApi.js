/**
 * Stellar DataStore
 * The Stellar DataStore service is your instantly available, secure and worry-free cloud data storage service. Sign-up now and minutes later, you can start putting your data in the cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RevokeTokenRequest from '../model/RevokeTokenRequest';
import TokenResponse from '../model/TokenResponse';

/**
* OAuth service.
* @module api/OAuthApi
* @version v1
*/
export default class OAuthApi {

    /**
    * Constructs a new OAuthApi. 
    * @alias module:api/OAuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1OauthRevokePost operation.
     * @callback module:api/OAuthApi~v1OauthRevokePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RevokeTokenRequest} revokeTokenRequest 
     * @param {module:api/OAuthApi~v1OauthRevokePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1OauthRevokePost(revokeTokenRequest, callback) {
      let postBody = revokeTokenRequest;
      // verify the required parameter 'revokeTokenRequest' is set
      if (revokeTokenRequest === undefined || revokeTokenRequest === null) {
        throw new Error("Missing the required parameter 'revokeTokenRequest' when calling v1OauthRevokePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/oauth/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1OauthTokenPost operation.
     * @callback module:api/OAuthApi~v1OauthTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} grantType 
     * @param {String} clientId 
     * @param {String} clientSecret 
     * @param {Object} opts Optional parameters
     * @param {String} [redirectUri = '')] 
     * @param {String} [code = '')] 
     * @param {String} [refreshToken = '')] 
     * @param {module:api/OAuthApi~v1OauthTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse}
     */
    v1OauthTokenPost(grantType, clientId, clientSecret, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'grantType' is set
      if (grantType === undefined || grantType === null) {
        throw new Error("Missing the required parameter 'grantType' when calling v1OauthTokenPost");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling v1OauthTokenPost");
      }
      // verify the required parameter 'clientSecret' is set
      if (clientSecret === undefined || clientSecret === null) {
        throw new Error("Missing the required parameter 'clientSecret' when calling v1OauthTokenPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'grant_type': grantType,
        'client_id': clientId,
        'client_secret': clientSecret,
        'redirect_uri': opts['redirectUri'],
        'code': opts['code'],
        'refresh_token': opts['refreshToken']
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TokenResponse;
      return this.apiClient.callApi(
        '/v1/oauth/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
