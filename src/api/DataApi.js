/**
 * Stellar DataStore
 * The Stellar DataStore service is your instantly available, secure and worry-free cloud data storage service. Sign-up now and minutes later, you can start putting your data in the cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AbstractObjectQueryResult from '../model/AbstractObjectQueryResult';
import CreateRecordRequest from '../model/CreateRecordRequest';
import ServiceResult from '../model/ServiceResult';
import Stream from '../model/Stream';
import UpdateRecordRequest from '../model/UpdateRecordRequest';

/**
* Data service.
* @module api/DataApi
* @version v1
*/
export default class DataApi {

    /**
    * Constructs a new DataApi. 
    * @alias module:api/DataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1DataTableBlobGet operation.
     * @callback module:api/DataApi~v1DataTableBlobGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a file from a blob field as a stream.
     * @param {String} project The project containing the table.
     * @param {Number} table The table containing the records.
     * @param {Number} record The record to be queried.
     * @param {String} field The field of the record.
     * @param {module:api/DataApi~v1DataTableBlobGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stream}
     */
    v1DataTableBlobGet(project, table, record, field, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1DataTableBlobGet");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling v1DataTableBlobGet");
      }
      // verify the required parameter 'record' is set
      if (record === undefined || record === null) {
        throw new Error("Missing the required parameter 'record' when calling v1DataTableBlobGet");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling v1DataTableBlobGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project,
        'table': table,
        'record': record,
        'field': field
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Stream;
      return this.apiClient.callApi(
        '/v1/data/table/blob', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1DataTableBlobPost operation.
     * @callback module:api/DataApi~v1DataTableBlobPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a file to a blob field.
     * @param {String} project The project containing the table.
     * @param {Number} table The table containing the records.
     * @param {Number} record The record to be queried.
     * @param {String} field The field of the record.
     * @param {Object} opts Optional parameters
     * @param {File} [data] 
     * @param {module:api/DataApi~v1DataTableBlobPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stream}
     */
    v1DataTableBlobPost(project, table, record, field, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1DataTableBlobPost");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling v1DataTableBlobPost");
      }
      // verify the required parameter 'record' is set
      if (record === undefined || record === null) {
        throw new Error("Missing the required parameter 'record' when calling v1DataTableBlobPost");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling v1DataTableBlobPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project,
        'table': table,
        'record': record,
        'field': field
      };
      let headerParams = {
      };
      let formParams = {
        'data': opts['data']
      };

      let authNames = ['Bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Stream;
      return this.apiClient.callApi(
        '/v1/data/table/blob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1DataTableClearDelete operation.
     * @callback module:api/DataApi~v1DataTableClearDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all records from the given table.
     * @param {String} project The project containing the table.
     * @param {Number} table The table to delete from.
     * @param {module:api/DataApi~v1DataTableClearDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1DataTableClearDelete(project, table, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1DataTableClearDelete");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling v1DataTableClearDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project,
        'table': table
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/data/table/clear', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1DataTableDelete operation.
     * @callback module:api/DataApi~v1DataTableDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes records from the given table.
     * @param {String} project The project containing the table.
     * @param {Number} table Id of table where you want to delete a record.
     * @param {Object} opts Optional parameters
     * @param {Number} [record] record id to delete.
     * @param {module:api/DataApi~v1DataTableDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1DataTableDelete(project, table, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1DataTableDelete");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling v1DataTableDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project,
        'table': table,
        'record': opts['record']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/data/table', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1DataTableDeletePost operation.
     * @callback module:api/DataApi~v1DataTableDeletePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes records from the given table.
     * @param {String} project The project containing the table.
     * @param {Number} table The table to delete from.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [requestBody] An array of ids
     * @param {module:api/DataApi~v1DataTableDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1DataTableDeletePost(project, table, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1DataTableDeletePost");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling v1DataTableDeletePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project,
        'table': table
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/data/table/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1DataTableGet operation.
     * @callback module:api/DataApi~v1DataTableGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AbstractObjectQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the records for a given table.
     * @param {String} project The project containing the table.
     * @param {Number} table Id of the table containing the records.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] The offset of the records.
     * @param {Number} [take] The amount of records.
     * @param {String} [joinQuery] The join queries to apply.
     * @param {String} [whereQuery] The where queries to apply.
     * @param {String} [sortQuery] The sort queries to apply.
     * @param {Boolean} [distinct = false)] 
     * @param {String} [select] 
     * @param {module:api/DataApi~v1DataTableGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AbstractObjectQueryResult}
     */
    v1DataTableGet(project, table, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1DataTableGet");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling v1DataTableGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project,
        'table': table,
        'Offset': opts['offset'],
        'Take': opts['take'],
        'JoinQuery': opts['joinQuery'],
        'WhereQuery': opts['whereQuery'],
        'SortQuery': opts['sortQuery'],
        'distinct': opts['distinct'],
        'select': opts['select']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AbstractObjectQueryResult;
      return this.apiClient.callApi(
        '/v1/data/table', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1DataTablePost operation.
     * @callback module:api/DataApi~v1DataTablePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AbstractObjectQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds records to the given table.
     * @param {String} project The project containing the table.
     * @param {Number} table The table to be added to.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateRecordRequest} [createRecordRequest] 
     * @param {module:api/DataApi~v1DataTablePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AbstractObjectQueryResult}
     */
    v1DataTablePost(project, table, opts, callback) {
      opts = opts || {};
      let postBody = opts['createRecordRequest'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1DataTablePost");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling v1DataTablePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project,
        'table': table
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = AbstractObjectQueryResult;
      return this.apiClient.callApi(
        '/v1/data/table', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1DataTablePut operation.
     * @callback module:api/DataApi~v1DataTablePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AbstractObjectQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates records in the given table based on the values in record.
     * @param {String} project The project containing the table.
     * @param {Number} table The table to be updated in.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] If you are certain you want to update all your records in case no ids were included.
     * @param {module:model/UpdateRecordRequest} [updateRecordRequest] 
     * @param {module:api/DataApi~v1DataTablePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AbstractObjectQueryResult}
     */
    v1DataTablePut(project, table, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateRecordRequest'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1DataTablePut");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling v1DataTablePut");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project,
        'table': table,
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = AbstractObjectQueryResult;
      return this.apiClient.callApi(
        '/v1/data/table', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
