/**
 * Stellar DataStore
 * The Stellar DataStore service is your instantly available, secure and worry-free cloud data storage service. Sign-up now and minutes later, you can start putting your data in the cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IServiceResult from '../model/IServiceResult';
import ProjectRequest from '../model/ProjectRequest';
import ServiceResult from '../model/ServiceResult';
import TableResponseIEnumerableServiceResult from '../model/TableResponseIEnumerableServiceResult';

/**
* Project service.
* @module api/ProjectApi
* @version v1
*/
export default class ProjectApi {

    /**
    * Constructs a new ProjectApi. 
    * @alias module:api/ProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1SchemaProjectGet operation.
     * @callback module:api/ProjectApi~v1SchemaProjectGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IServiceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets project(s) from the logged in user.
     * @param {Object} opts Optional parameters
     * @param {String} [project] The optional project guid to be fetched.
     * @param {module:api/ProjectApi~v1SchemaProjectGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IServiceResult}
     */
    v1SchemaProjectGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'project': opts['project']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = IServiceResult;
      return this.apiClient.callApi(
        '/v1/schema/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SchemaProjectPut operation.
     * @callback module:api/ProjectApi~v1SchemaProjectPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableResponseIEnumerableServiceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a project.
     * @param {String} project The project to be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectRequest} [projectRequest] 
     * @param {module:api/ProjectApi~v1SchemaProjectPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableResponseIEnumerableServiceResult}
     */
    v1SchemaProjectPut(project, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectRequest'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1SchemaProjectPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TableResponseIEnumerableServiceResult;
      return this.apiClient.callApi(
        '/v1/schema/project', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
