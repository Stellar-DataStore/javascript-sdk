/**
 * Stellar DataStore
 * The Stellar DataStore service is your instantly available, secure and worry-free cloud data storage service. Sign-up now and minutes later, you can start putting your data in the cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IServiceResult from '../model/IServiceResult';

/**
* ProjectTier service.
* @module api/ProjectTierApi
* @version v1
*/
export default class ProjectTierApi {

    /**
    * Constructs a new ProjectTierApi. 
    * @alias module:api/ProjectTierApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1ProjectTierCurrentGet operation.
     * @callback module:api/ProjectTierApi~v1ProjectTierCurrentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IServiceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} project 
     * @param {module:api/ProjectTierApi~v1ProjectTierCurrentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IServiceResult}
     */
    v1ProjectTierCurrentGet(project, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1ProjectTierCurrentGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = IServiceResult;
      return this.apiClient.callApi(
        '/v1/project-tier/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ProjectTierGet operation.
     * @callback module:api/ProjectTierApi~v1ProjectTierGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IServiceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} project 
     * @param {module:api/ProjectTierApi~v1ProjectTierGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IServiceResult}
     */
    v1ProjectTierGet(project, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1ProjectTierGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = IServiceResult;
      return this.apiClient.callApi(
        '/v1/project-tier', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
