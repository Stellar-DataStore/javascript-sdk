/**
 * Stellar DataStore
 * The Stellar DataStore service is your instantly available, secure and worry-free cloud data storage service. Sign-up now and minutes later, you can start putting your data in the cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AbstractObjectServiceResult from '../model/AbstractObjectServiceResult';
import IServiceResult from '../model/IServiceResult';
import ServiceResult from '../model/ServiceResult';
import TableRequest from '../model/TableRequest';
import TableResponseIEnumerableServiceResult from '../model/TableResponseIEnumerableServiceResult';

/**
* Table service.
* @module api/TableApi
* @version v1
*/
export default class TableApi {

    /**
    * Constructs a new TableApi. 
    * @alias module:api/TableApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1SchemaTableDelete operation.
     * @callback module:api/TableApi~v1SchemaTableDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a table from the database.
     * @param {String} project The project containing the table.
     * @param {Number} table The table to be deleted.
     * @param {module:api/TableApi~v1SchemaTableDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1SchemaTableDelete(project, table, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1SchemaTableDelete");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling v1SchemaTableDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project,
        'table': table
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/schema/table', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SchemaTableGet operation.
     * @callback module:api/TableApi~v1SchemaTableGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IServiceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets table(s) from the logged in user.
     * @param {String} project The project containing the table.
     * @param {Object} opts Optional parameters
     * @param {String} [table] name or id of the table to fetch (optional)
     * @param {module:api/TableApi~v1SchemaTableGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IServiceResult}
     */
    v1SchemaTableGet(project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1SchemaTableGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project,
        'table': opts['table']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = IServiceResult;
      return this.apiClient.callApi(
        '/v1/schema/table', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SchemaTablePost operation.
     * @callback module:api/TableApi~v1SchemaTablePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AbstractObjectServiceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new table in the database.
     * @param {String} project The project containing the table.
     * @param {Object} opts Optional parameters
     * @param {module:model/TableRequest} [tableRequest] 
     * @param {module:api/TableApi~v1SchemaTablePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AbstractObjectServiceResult}
     */
    v1SchemaTablePost(project, opts, callback) {
      opts = opts || {};
      let postBody = opts['tableRequest'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1SchemaTablePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AbstractObjectServiceResult;
      return this.apiClient.callApi(
        '/v1/schema/table', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SchemaTablePut operation.
     * @callback module:api/TableApi~v1SchemaTablePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableResponseIEnumerableServiceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a table in the database.
     * @param {String} project The project containing the table.
     * @param {Object} opts Optional parameters
     * @param {Number} [table] The table to be updated.
     * @param {module:model/TableRequest} [tableRequest] 
     * @param {module:api/TableApi~v1SchemaTablePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableResponseIEnumerableServiceResult}
     */
    v1SchemaTablePut(project, opts, callback) {
      opts = opts || {};
      let postBody = opts['tableRequest'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1SchemaTablePut");
      }

      let pathParams = {
      };
      let queryParams = {
        'project': project,
        'table': opts['table']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TableResponseIEnumerableServiceResult;
      return this.apiClient.callApi(
        '/v1/schema/table', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
