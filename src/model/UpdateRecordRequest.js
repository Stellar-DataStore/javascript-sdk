/**
 * Stellar DataStore
 * The Stellar DataStore service is your instantly available, secure and worry-free cloud data storage service. Sign-up now and minutes later, you can start putting your data in the cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateRecordRequest model module.
 * @module model/UpdateRecordRequest
 * @version v1
 */
class UpdateRecordRequest {
    /**
     * Constructs a new <code>UpdateRecordRequest</code>.
     * @alias module:model/UpdateRecordRequest
     * @param record {Object.<String, Object>} 
     */
    constructor(record) { 
        
        UpdateRecordRequest.initialize(this, record);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, record) { 
        obj['record'] = record;
    }

    /**
     * Constructs a <code>UpdateRecordRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateRecordRequest} obj Optional instance to populate.
     * @return {module:model/UpdateRecordRequest} The populated <code>UpdateRecordRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateRecordRequest();

            if (data.hasOwnProperty('idList')) {
                obj['idList'] = ApiClient.convertToType(data['idList'], [Object]);
            }
            if (data.hasOwnProperty('record')) {
                obj['record'] = ApiClient.convertToType(data['record'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateRecordRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateRecordRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateRecordRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['idList'])) {
            throw new Error("Expected the field `idList` to be an array in the JSON data but got " + data['idList']);
        }

        return true;
    }


}

UpdateRecordRequest.RequiredProperties = ["record"];

/**
 * @member {Array.<Object>} idList
 */
UpdateRecordRequest.prototype['idList'] = undefined;

/**
 * @member {Object.<String, Object>} record
 */
UpdateRecordRequest.prototype['record'] = undefined;






export default UpdateRecordRequest;

